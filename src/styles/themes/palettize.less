/**
 * LESS Function that generates CSS variables for a palette of colours.
 * Currently it doesn't do checking for contrast, but it probably should.
* NOTE: 'warm' and 'cool' are used here primarily because they're more memorable labels than 'primary' or 'secondary'. They *could* be 'warmer'/'cooler' colours, but they don't have to be; 'warm'/'cool' might be thought of a marker of importantance/activity (warmer = more active/dramatic).
 * @prefix - the prefix to use for the generated CSS variables.
 * @fgColor - The foreground color.
 * @bgColor - The background color.
 * @warmAccentColor - A saturated color, used both as-is and in mixtures with the other colours.
 * @coolAccentColor - A second saturated color, used both as-is and in mixtures with the other colours.
 */
.palettize(@prefix:palette, @fgColor:black,@bgColor:white,@warmAccentColor:#ff6600,@coolAccentColor:#ff0000) {
  @lightColor: if((luma(@fgColor) > luma(@bgColor)), @fgColor, @bgColor);
  @darkColor: if((luma(@fgColor) < luma(@bgColor)), @fgColor, @bgColor);
  --@{prefix}-light: @lightColor;
  --@{prefix}-dark: @darkColor;
  --@{prefix}-fg: @fgColor;
  --@{prefix}-bg: @bgColor;
  --@{prefix}-accent-warm: @warmAccentColor;
  --@{prefix}-accent-cool: @coolAccentColor;
  // generate overlays
  @overlays: range(10, 90, 10);
  // these *could* be done in a single function, but it makes it harder to read
  each(@overlays, {
    --@{prefix}-fg-@{value}: fade(@fgColor, @value);
  });
  each(@overlays, {
    --@{prefix}-bg-@{value}: fade(@bgColor, @value);
  });
  each(@overlays, {
    --@{prefix}-light-@{value}: fade(@lightColor, @value);
  });
  each(@overlays, {
    --@{prefix}-dark-@{value}: fade(@darkColor, @value);
  });

  each(@overlays, {
    --@{prefix}-accent-warm-@{value}: fade(@warmAccentColor, @value);
  });
  each(@overlays, {
    --@{prefix}-accent-cool-@{value}: fade(@coolAccentColor, @value);
  });

  // generate mixtures
  @mixtures: range(10, 90, 10);
  each(@mixtures, {
    --@{prefix}-tone-@{value}: mix(@fgColor, @bgColor, @value);
  });

  @lightHue: mix(@lightColor, @warmAccentColor, 75%);
  @lightHueAlt: mix(@lightColor, @coolAccentColor, 75%);
  @darkHue: mix(@darkColor, @warmAccentColor, 75%);
  @darkHueAlt: mix(@darkColor, @coolAccentColor, 75%);

  @lightHighlight: hsl(hue(@lightHue), 100%, 75%);
  @lightHighlightAlt: hsl(hue(@lightHueAlt), 100%, 75%);
  @lightMuted: desaturate(mix(@lightColor, @darkColor, 65%), 20%);
  @darkHighlightWarm: mix(@darkColor, @warmAccentColor, 50%);
  @darkHighlightCool: mix(@darkColor, @coolAccentColor, 50%);
  @darkMuted: desaturate(mix(@darkColor, @lightColor, 65%), 20%);

  --@{prefix}-light-highlight: @lightHighlight;
  --@{prefix}-light-highlight-cool: @lightHighlightAlt;
  --@{prefix}-light-muted: @lightMuted;

  --@{prefix}-dark-highlight: @darkHighlightWarm;
  --@{prefix}-dark-highlight-cool: @darkHighlightCool;
  --@{prefix}-dark-muted: @darkMuted;

  --@{prefix}-fg-highlight: if(
    (luma(@bgColor) > luma(@fgColor)),
    @darkHighlightWarm,
    @lightHighlight
  );
  --@{prefix}-fg-highlight-cool: if(
    (luma(@bgColor) > luma(@fgColor)),
    @darkHighlightCool,
    @lightHighlightAlt
  );
  --@{prefix}-fg-muted: if(
    (luma(@bgColor) > luma(@fgColor)),
    @darkMuted,
    @lightMuted
  );

  --@{prefix}-bg-highlight: if(
    (luma(@bgColor) > luma(@fgColor)),
    @lightHighlight,
    @darkHighlightWarm
  );

  --@{prefix}-bg-highlight-cool: if(
    (luma(@bgColor) > luma(@fgColor)),
    @lightHighlightAlt,
    @darkHighlightCool
  );

  --@{prefix}-bg-alt: if(
    (luma(@bgColor) > luma(@fgColor)),
    @lightMuted,
    @darkMuted
  );
}
