/**
 * LESS Function that generates CSS variables for a palette of colours.
 * Currently it doesn't do checking for contrast, but it probably should.
* NOTE: 'warm' and 'cool' are used here primarily because they're more memorable labels than 'primary' or 'secondary'. They *could* be 'warmer'/'cooler' colours, but they don't have to be; 'warm'/'cool' are more about a UX element's importance/activity (warmer = more active/dramatic).
 * @prefix - the prefix to use for the generated CSS variables.
 * @fgColor - The foreground color.
 * @bgColor - The background color.
 * @warmAccentColor - A saturated color, used both as-is and in mixtures with the other colours.
 * @coolAccentColor - A second saturated color, used both as-is and in mixtures with the other colours.
 */
.palettize(@prefix:palette, @fgColor:hsl(0, 0%, 0%),@bgColor:hsl(0, 0%, 100%),@warmAccentColor:hsl(24, 100%, 50%), @coolAccentColor:hsl(0, 100%, 50%)) {
  // TODO: This could probably be improved significantly by writing palettize in JS to take advantage of chroma.js, then importing it as a LESS plugin. The various scale functions are particularly attractive!
  @lightColor: if((luma(@fgColor) > luma(@bgColor)), @fgColor, @bgColor);
  @darkColor: if((luma(@fgColor) < luma(@bgColor)), @fgColor, @bgColor);
  --@{prefix}-light: @lightColor;
  --@{prefix}-dark: @darkColor;
  --@{prefix}-warm: @warmAccentColor;
  --@{prefix}-cool: @coolAccentColor;
  --@{prefix}-fg: @fgColor;
  --@{prefix}-bg: @bgColor;
  // generate overlays
  @overlays: range(10, 90, 10);
  // these *could* be done in a single function, but it makes it harder to read
  each(@overlays, {
    --@{prefix}-fg-@{value}: fade(@fgColor, @value);
  });
  each(@overlays, {
    --@{prefix}-bg-@{value}: fade(@bgColor, @value);
  });
  each(@overlays, {
    --@{prefix}-light-@{value}: fade(@lightColor, @value);
  });
  each(@overlays, {
    --@{prefix}-dark-@{value}: fade(@darkColor, @value);
  });

  each(@overlays, {
    --@{prefix}-warm-@{value}: fade(@warmAccentColor, @value);
  });
  each(@overlays, {
    --@{prefix}-cool-@{value}: fade(@coolAccentColor, @value);
  });

  // generate mixtures
  @mixtures: range(10, 90, 10);
  each(@mixtures, {
    --@{prefix}-tone-@{value}: mix(@fgColor, @bgColor, @value);
  });

  @lightHueWarm: mix(@warmAccentColor, @lightColor, 25%);
  @lightHueCool: mix(@coolAccentColor, @lightColor, 25%);
  @darkHueWarm: mix(@warmAccentColor, @darkColor, 25%);
  @darkHueCool: mix(@coolAccentColor, @darkColor, 25%);

  @lightWarm: hsl(hue(@lightHueWarm), 100%, 75%);
  @lightCool: hsl(hue(@lightHueCool), 100%, 75%);
  @darkWarm: mix(@darkColor, @warmAccentColor, 50%);
  @darkCool: mix(@darkColor, @coolAccentColor, 50%);

  @lightMuted: desaturate(mix(@lightColor, @darkColor, 65%), 20%);
  @darkMuted: desaturate(mix(@darkColor, @lightColor, 65%), 20%);

  --@{prefix}-light-warm: @lightWarm;
  --@{prefix}-light-cool: @lightCool;
  --@{prefix}-light-muted: @lightMuted;

  --@{prefix}-dark-warm: @darkWarm;
  --@{prefix}-dark-cool: @darkCool;
  --@{prefix}-dark-muted: @darkMuted;

  --@{prefix}-fg-warm: if(
    (luma(@bgColor) > luma(@fgColor)),
    @darkWarm,
    @lightWarm
  );
  --@{prefix}-fg-cool: if(
    (luma(@bgColor) > luma(@fgColor)),
    @darkCool,
    @lightCool
  );
  --@{prefix}-fg-muted: if(
    (luma(@bgColor) > luma(@fgColor)),
    @darkMuted,
    @lightMuted
  );

  --@{prefix}-bg-warm: if(
    (luma(@bgColor) > luma(@fgColor)),
    @lightWarm,
    @darkWarm
  );

  --@{prefix}-bg-cool: if(
    (luma(@bgColor) > luma(@fgColor)),
    @lightCool,
    @darkCool
  );

  --@{prefix}-bg-alt: if(
    (luma(@bgColor) > luma(@fgColor)),
    @lightMuted,
    @darkMuted
  );
}
