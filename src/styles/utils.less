// for classes that apply a set of commonly used styles, but don't describe an element with a specific purpose
@import 'mixins.less';

.grid {
  display: grid;
}

.margin-left {
  .marginMixin(right);
}

.highlighted {
  .staticHighlightMixin(30);
}

.scrollable {
  // property intentionally duplicated to provide fallback
  overflow-y: scroll;
  overflow-y: overlay;
}

.margin-right {
  .marginMixin(left);
}
.vertical-text {
  writing-mode: vertical-lr;
  border: none;
  width: 1.5rem;
  i {
    display: inline-block;
    transform: rotate(90deg);
  }
}

.inset {
  margin: var(--ironsworn-spacer-md);
  padding: var(--ironsworn-spacer-md);
  border: var(--ironsworn-border-width-md) solid
    var(--ironsworn-color-border-muted);
  border-radius: var(--ironsworn-border-radius-md);
}
.boxgroup {
  border: var(--ironsworn-border-width-md) solid var(--ironsworn-color-border);
  border-radius: var(--ironsworn-border-radius-lg);

  .boxrow {
    border-top: var(--ironsworn-border-width-md) solid
      var(--ironsworn-color-border);
    &:first-child {
      border-top: none;
    }
    &.small {
      flex-basis: 25px;
      line-height: 25px;
      flex-grow: 0;
    }
  }
  .box {
    border-width: var(--ironsworn-border-width-md);
    display: flex;
    text-align: center;
    justify-content: center;
    border-left: var(--ironsworn-border-width-md) solid
      var(--ironsworn-color-border);
    &:first-child {
      border-left: none;
    }
  }
}

.stack {
  flex-grow: 0;
  .stack-row {
    // FIXME refactor as component and encapsulate the relevant css there
    flex: 0 0 auto;
    min-width: var(--ironsworn-vertical-slider-width);
    border: var(--ironsworn-border-width-md) solid var(--ironsworn-color-border);
    border-top: none;
    text-align: center;
    line-height: var(--ironsworn-clickable-line-height);
    position: relative;
    z-index: auto;
    padding: 0;
    &:hover,
    &.hover,
    &.selected,
    &[aria-selected='true'] {
      z-index: var(
        --ironsworn-z-index-high
      ); // with position: relative, ensures that hovered item borders/filters aren't rendered behind other items
    }
    &:first-child {
      border-top-left-radius: var(--ironsworn-border-radius-lg);
      border-top-right-radius: var(--ironsworn-border-radius-lg);
    }
    &:last-child {
      border-bottom-left-radius: var(--ironsworn-border-radius-lg);
      border-bottom-right-radius: var(--ironsworn-border-radius-lg);
    }

    input[type='radio'] {
      appearance: none;
    }
  }
}

.nogrow {
  flex-grow: 0 !important;
}

.strikethru * {
  text-decoration: line-through;
}

[data-ironsworn-drop-type] {
  --ironsworn-drop-zone-outline-width: 3px;
  --ironsworn-drop-zone-outline-offset: 5px;
  --ironsworn-drop-zone-outline-style: dotted;
  position: relative;
  outline: 0 var(--ironsworn-drop-zone-outline-style) transparent;
  // outline-offset: var(--ironsworn-drop-zone-outline-offset);
  transition: all 0.2s ease;
  &:after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    pointer-events: none;
    transition: all 0.2s ease;
    opacity: 0;
    visibility: hidden;
    border-radius: inherit;
    .staticHighlightMixin(20);
    z-index: var(--ironsworn-z-index-highest);
  }
  &[data-ironsworn-drop-active='true'] {
    outline-width: var(--ironsworn-drop-zone-outline-width);
    outline-color: var(--ironsworn-color-fg-warm-30);
    outline-offset: calc(-1 * var(--ironsworn-drop-zone-outline-width));
    animation: drop-zone-pulsate-outline 0.8s ease-in-out infinite both;
    &:after {
      opacity: 1;
      visibility: visible;
      background-blend-mode: screen;
      animation: drop-zone-pulsate-gradient 0.8s ease-in-out infinite both;
    }
  }
}

@keyframes drop-zone-pulsate-outline {
  0% {
    outline-offset: calc(-1 * var(--ironsworn-drop-zone-outline-width));
  }
  50% {
    outline-offset: calc(-2 * var(--ironsworn-drop-zone-outline-width));
  }
  100% {
    outline-offset: calc(-1 * var(--ironsworn-drop-zone-outline-width));
  }
}

@keyframes drop-zone-pulsate-gradient {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}
